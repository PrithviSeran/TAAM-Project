package com.example.TAAM_collection_management.adapters;

import android.content.Context;
import android.net.Uri;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.cardview.widget.CardView;
import androidx.core.content.res.ResourcesCompat;
import androidx.recyclerview.widget.RecyclerView;

import com.example.TAAM_collection_management.strategy.Item;
import com.example.b07demosummer2024.R;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.squareup.picasso.Picasso;

import java.util.List;
import java.util.ArrayList;

/**
 * Class used to filter out items based on user input from
 * <code>KeywordSearchFragment</code>.
 * <p>
 * KeywordSearchAdapter creates a <code>Filter</code> which filters all
 * items that contain the <code>CharSequence</code> input by user. It also
 * creates and fills values for many <code>item_card.xml</code> views, which display
 * all filtered items in <code>KeywordSearchFragment</code>'s view.
 * <p>
 * Extends <code>RecyclerView.Adapter<KeywordSearchAdapter.MyViewHolder></code> create item cards
 * for <code>RecyclerView</code> in <code>KeywordSearchFragment</code>.Implements <code>Filterable</code>
 * to filter items.
 */
public class KeywordSearchAdapter extends RecyclerView.Adapter<KeywordSearchAdapter.MyViewHolder> implements Filterable {
    private Context context;
    private List<Item> items;
    private OnItemClickListener listener;
    private List<Item> getItemsFilter;
    protected StorageReference storageReference = FirebaseStorage.getInstance("gs://login-taam-bo7.appspot.com").getReference();
    protected StorageReference storageRef;


    public static class MyViewHolder extends RecyclerView.ViewHolder {

        TextView itemNameText, lotNumText, periodText, categoryText;
        CardView itemCard;
        ImageView itemImage;

        public MyViewHolder(@NonNull View itemView) {
            super(itemView);

            this.itemNameText = itemView.findViewById(R.id.itemNameText);
            this.lotNumText = itemView.findViewById(R.id.lotNumText);
            this.periodText = itemView.findViewById(R.id.periodText);
            this.categoryText = itemView.findViewById(R.id.categoryText);
            this.itemCard = itemView.findViewById(R.id.itemCard);
            this.itemImage = itemView.findViewById(R.id.item_image);
        }
    }


    public interface OnItemClickListener {
        void onItemClick(Item item);
    }

    /**
     * Constructor for <code>KeywordSearchAdapter</code>. Sets the
     * items, context, and the <code>OnItemClickListener</code> interface
     * to parameters.
     *
     * @param context       Context of current view. Current view should be generated by
     *                      <code>KeywordSearchFragment</code>.
     * @param items         Empty list, to be filled with content from Firebase database in
     *                      <code>KeywordSearchFragment</code>.
     * @param listener      <code>OnItemClickListener</code>
     */
    public KeywordSearchAdapter(Context context, List<Item> items, OnItemClickListener listener) {
        this.context = context;
        this.items = items;
        this.getItemsFilter = items;
        this.listener = listener;
    }

    /**
     * This method creates a filter that keeps all items that contain the given
     * <code>CharSequence</code>.
     * <p>
     * Performing the filter returns a <code>FilterResults</code> object which contains
     * both the total number of filtered items and the filtered items that contain the
     * input <code>CharSequence</code> in any part of the items information.
     *
     * @return      A <code>Filter</code> that filters all the items from <code>items</code>
     *              that contain <code>searchStr</code> in any part of the item information.
     */
    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence charSequence) {
                FilterResults filterResults = new FilterResults();
                if (charSequence == null || charSequence.length() == 0){
                    filterResults.values = getItemsFilter;
                    filterResults.count = getItemsFilter.size();
                } else {
                    String searchStr = charSequence.toString().toLowerCase();
                    List<Item> newItems = new ArrayList<>();
                    for (Item item: getItemsFilter){
                        if (findMatch(item, searchStr)) {
                            newItems.add(item);
                        }
                    }
                    filterResults.values = newItems;
                    filterResults.count = newItems.size();
                }

                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                items = (List<Item>) filterResults.values;
                // update user adapter
                notifyDataSetChanged();
            }
        };
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(context).inflate(R.layout.item_card, parent, false);

        return new MyViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        Item item = items.get(position);
  
        holder.itemNameText.setText(items.get(position).getName());
        holder.lotNumText.setText(items.get(position).getLotNum());
        holder.periodText.setText(items.get(position).getPeriod());
        holder.categoryText.setText(items.get(position).getCategory());
        setTextStyle(holder);
        retrieveFromStorage(holder.itemImage, item.getLotNum());

        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                listener.onItemClick(item);
            }
        });
    }

    public void setOnItemClickListener(OnItemClickListener listener) {
        this.listener = listener;
    }

    @Override
    public int getItemCount() {
        if (items == null) {
            return 0;
        }
        return items.size();
    }

    private boolean findMatch(Item item, String searchStr) {
        return item.getName().toLowerCase().contains(searchStr) ||
                item.getLotNum().contains(searchStr) ||
                item.getPeriod().toLowerCase().contains(searchStr) ||
                item.getCategory().toLowerCase().contains(searchStr);
    }

    private void retrieveFromStorage(ImageView imageView, String identifier) {
        StorageReference fileRef = storageReference.child(identifier);
        fileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
            @Override
            public void onSuccess(Uri uri) {
                Picasso.get().load(uri).into(imageView);
            }
        });
    }

    private void setTextStyle(MyViewHolder holder){
        Typeface customTypeface = ResourcesCompat.getFont(context, R.font.roboto);
        Typeface boldTypeface = ResourcesCompat.getFont(context, R.font.lato_bold);
        
        holder.itemNameText.setTypeface(boldTypeface);
        holder.lotNumText.setTypeface(customTypeface);
        holder.periodText.setTypeface(customTypeface);
        holder.categoryText.setTypeface(customTypeface);

        holder.itemNameText.setTextSize(16);
        holder.lotNumText.setTextSize(16);
        holder.periodText.setTextSize(16);
        holder.categoryText.setTextSize(16);
    }
}
